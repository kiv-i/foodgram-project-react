name: Main Footgram Workflow

on:
  push:
    branches: 
      - main

jobs:
  BACKEND_TESTS:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:13.10
        env:
          POSTGRES_USER: user
          POSTGRES_PASSWORD: password
          POSTGRES_DB: db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v3

      - name: Set Up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"
      
      - name: Install Dependecies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 flake8-isort
          pip install -r ./backend/requirements.txt

      - name: Test With Flake8
        env:
          POSTGRES_USER: user
          POSTGRES_PASSWORD: password
          POSTGRES_DB: db
          DB_HOST: 127.0.0.1
          DB_PORT: 5432
          SECRET_KEY: django-sekret-key
        run: python -m flake8 backend/

  FRONTEND_TESTS:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v3

      - name: Set Up NodeJS
        uses: actions/setup-node@v3
        with:
          node-version: "18"

      - name: Install Dependencies
        run: |
          cd frontend/
          npm ci

      - name: Test Frontend
        run: |
          cd frontend/
          npm run test

  BUILD_BACKEND_AND_PUSH_TO_DOCKER_HUB:
    name: Push Backend Docker Image To DockerHub
    runs-on: ubuntu-latest
    needs: BACKEND_TESTS
    steps:
      - name: Checkuot Repo
        uses: actions/checkout@v3

      - name: Set Up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login To Docker
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Push To DockerHup
        uses: docker/build-push-action@v4
        with:
          context: ./backend/
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/footgram_backend:latest

  BUILD_FRONTEND_AND_PUSH_TO_DOCKER_HUB:
    name: Push Frontend Docker Image To DockerHub
    runs-on: ubuntu-latest
    needs: FRONTEND_TESTS
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker 
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Push to DockerHub
        uses: docker/build-push-action@v4
        with:
          context: ./frontend/
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/foodgram_frontend:latest

  DEPLOY_PROJECT:
    name: Deploy Foodgram Project
    runs-on: ubuntu-latest
    needs: 
      - BUILD_BACKEND_AND_PUSH_TO_DOCKER_HUB
      - BUILD_FRONTEND_AND_PUSH_TO_DOCKER_HUB
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v3

      - name: Copy docker-compose.yml Via SSH
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USER }}
          key: ${{ secrets.SSH_KEY }}
          passphrase: ${{ secrets.SSH_PASSPHRASE }}
          source: 'docker-compose.production.yml'
          target: foodgram

      - name: Executing Remote SSH Commands To Deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USER }}
          key: ${{ secrets.SSH_KEY }}
          passphrase: ${{ secrets.SSH_PASSPHRASE }}
          script: |
            cd foodgram/
            sudo docker compose -f docker-compose.production.yml pull
            sudo docker compose -f docker-compose.production.yml down
            sudo docker compose -f docker-compose.production.yml up -d
            sudo docker compose -f docker-compose.production.yml exec backend python manage.py migrate
            sudo docker compose -f docker-compose.production.yml exec backend python manage.py collectstatic
            sudo docker compose -f docker-compose.production.yml exec backend cp -r /app/static/. /static/static/
            sudo docker system prune -af

  SEND_MESSAGE:
    runs-on: ubuntu-latest
    needs: DEPLOY_PROJECT
    steps:
      - name: Send Message
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAM_TO }}
          token: ${{ secrets.TELEGRAM_TOKEN }}
          message:  Деплой foodgram успешно выполнен!
  